az login

# create a resource group to use
$resourceGroup = "test-priv-registry"
$location = "centralus"
$registryName =  "testacr19"

az group create -n $resourceGroup -l $location

# get the login server name
$loginServer = az acr show -n $registryName --query loginServer --output tsv

# get password for the acr
$acrPassword = az acr credential show -n $registryName `
    --query "passwords[0].value" -o tsv

az acr login --name $registryName

#------------------------------------------------------------
$storageAccountName = "acishare6749"

# create a storage account
az storage account create -g $resourceGroup -n $storageAccountName --sku Standard_LRS

# get the connection string for our storage account
$storageConnectionString = az storage account show-connection-string `
                           -n $storageAccountName -g $resourceGroup `
                           --query connectionString -o tsv

# export it as an environment variable
$env:AZURE_STORAGE_CONNECTION_STRING = $storageConnectionString

# Create the file share
$shareName="acishare"
az storage share create -n $shareName

# get the key for this storage account
$storageKey= az storage account keys list -g $resourceGroup `
             --account-name $storageAccountName `
             --query "[0].value" --output tsv

#------------------------------------------------------------

$image = "samplewebapp:v2"
$imageTag = "$loginServer/$image"

# create a new container group using the image from the private registry
# registry username needs to be $registryName
$containerGroupName = "aci-acr"
az container create -g $resourceGroup `
    -n $containerGroupName `
    --image $imageTag --cpu 1 --memory 1 `
    --registry-username $registryName `
    --registry-password $acrPassword `
    --azure-file-volume-account-name $storageAccountName `
    --azure-file-volume-account-key $storageKey `
    --azure-file-volume-share-name $shareName `
    --azure-file-volume-mount-path "/home" `
    --dns-name-label "aciacr" --ports 80

#--------------------------------------------------------------------------

# get the site address and launch in a browser
$fqdn = az container show -g $resourceGroup -n $containerGroupName `
    --query ipAddress.fqdn -o tsv
Start-Process "http://$($fqdn)"

# view the logs for our container
az container logs -n $containerGroupName -g $resourceGroup

# Execute Shell Command on Linux Container. This similar to Docker Exec command
az container exec -n $containerGroupName -g $resourceGroup --exec-command sh

# within the container: Save some text in txt file
echo "hello world!!" > /home/message.txt
exit

#NOTE: Check the message.txt on File share to for the above text that was just echoed.
az storage file list -s $shareName -o table

az container delete -g $resourceGroup -n $containerGroupName --yes

# delete the resource group (ACR and container group)
az group delete -n $resourceGroup -y